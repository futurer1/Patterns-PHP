<?php
/**
* Чтобы избежать конфликта глобальных переменных и убрать данные внутрь объекта,
* который будет доступен из всей области видимости приложения
* объект существует только в единичной реализации, к неё всегда идёт обращение
*/

class Preferences    //объект типа Singletone для хранения и обмена данными внутри приложения
{
    private $props = array();   //массив для хранения/выдачи данных, записываемых и считываемых из вне объекта
    private static $instance;   //переменная для хранения единственного объекта, созданного на основе класса Preferences

    private function __construct() {}   //private для того, чтобы невозможно было создать объект извне данного класса
    
    public static function getInstance()    //метод для первичного создания и последующего возврата объекта из переменной $instance
                                            //статический, чтобы мы могли обращаться из вне класса
    {
        if ( empty(self::instance) ){    //если переменная не установлена (в ней ещё нет объекта)
            self::instance = new Preferences();    //создаём объект за счёт того, что можем вызвать конструктор private
        }
        return self::instance;           //возвращаем объект
    }

    public function setProperty($val)   //метод записывает значение в массив для хранения внутри объекта
    {
        $this->props[$key] = $val;
    }
    
    public function getProperty($key)   //метод возвращает из внутреннего массива объекта значение по ключу
    {
        return $this->props[$key];
    }
}

//
?>
